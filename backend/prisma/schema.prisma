// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String        @unique
  username      String        @unique
  password      String
  avatar        String?
  role          String        @default("USER")
  score         Int           @default(0)
  isBlocked     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  solves        Solve[]
  languageId    String        @default("fr")
  language      Language      @relation(fields: [languageId], references: [id])
  notifications Notification[]

  @@index([languageId])
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  icon        String?    // Pour stocker le nom de l'icône FontAwesome
  color       String?    // Pour stocker la couleur associée
  challenges  Challenge[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum ChallengeType {
  URL
  IMAGE
  FILE
  TEXT
}

enum ResourceType {
  LINK
  FILE
}

enum Difficulty {
  EZ
  EASY
  NORMAL
  HARD
  EXPERT
}

model Challenge {
  id          String        @id @default(uuid())
  title       String
  subtitle    String?
  description String
  difficulty  Difficulty
  points      Int
  flag        String
  type        ChallengeType
  url         String?       // Pour les challenges de type URL
  imageb64    String?       // Pour les challenges de type IMAGE
  fileb64     String?       // Pour les challenges de type FILE
  filename    String?
  categoryId  String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  category    Category      @relation(fields: [categoryId], references: [id])
  resources   Resource[]
  solves      Solve[]
}

model Resource {
  id          String      @id @default(cuid())
  type        ResourceType
  value       String
  name        String?
  mimeType    String?
  size        Int?
  fileData    Bytes?
  challengeId String
  challenge   Challenge   @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([challengeId])
}

model Solve {
  id          String    @id @default(uuid())
  userId      String
  challengeId String
  solvedAt    DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  challenge   Challenge @relation(fields: [challengeId], references: [id])

  @@unique([userId, challengeId])
}

model Language {
  id       String @id
  name     String
  users    User[]
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  type      String   @default("ADMIN")
  read      Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}
